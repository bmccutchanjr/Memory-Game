{"version":3,"sources":["components/Card/Card.js","components/Title/Title.js","components/Wrapper/Wrapper.js","App.js","index.js"],"names":["Card","handleClick","event","preventDefault","_this","props","incrementScore","id","react_default","a","createElement","className","onClick","this","src","image","alt","name","Component","Title","score","Wrapper","children","App","state","animals","theScore","theCount","loser","Audio","tada","ting","randomize","aLen","length","newArray","i","randomIndex","Math","floor","random","saveIndex","splice","push","setState","index","isSelected","playAudio","resetGame","audio","load","play","_this2","components_Wrapper_Wrapper","components_Title_Title","map","animal","components_Card_Card","img","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"orDA+BeA,oNA1BXC,YAAc,SAAAC,GAKVA,EAAMC,iBAQNC,EAAKC,MAAMC,eAAeF,EAAKC,MAAME,6EAIrC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAUC,KAAKZ,aACjCO,EAAAC,EAAAC,cAAA,OAAKI,IAAMD,KAAKR,MAAMU,MAAOC,IAAMH,KAAKR,MAAMY,OAC9CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAaE,KAAKR,MAAMY,cAtBpCC,cCWJC,SAXD,SAACd,GACX,OACIG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACTN,EAAMe,MADZ,wBCAGC,SAJC,SAAAhB,GAAK,OACjBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWN,EAAMiB,mBCuKrBC,oNAnKXC,MACA,CAAIC,UACAC,SAAU,KAGdC,SAAW,IACXC,MAAQ,IAAIC,MAAO,uBACnBC,KAAO,IAAID,MAAO,uBAClBE,KAAO,IAAIF,MAAO,sBASlBG,UAAY,WAQR,IAFA,IAAMC,EAAOR,EAAQS,OACjBC,EAAW,GACNC,EAAE,EAAGA,EAAEH,EAAMG,IAClBD,EAASC,GAAKX,EAAQW,GAG1B,IAAK,IAAIA,EAAEH,EAAMG,GAAG,EAAGA,IACvB,CAUI,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAYJ,GAG1CK,EAAYN,EAASE,GAGzBF,EAASO,OAAOL,EAAa,GAG7BF,EAASQ,KAAKF,GAIlBrC,EAAKwC,SAAU,CAAEnB,QAASU,OAG9B7B,eAAiB,SAACC,GAoBd,IAHA,IAAIsC,EAAQ,EACNZ,EAAO7B,EAAKoB,MAAMC,QAAQS,OAEvBE,EAAE,EAAGA,EAAEH,EAAMG,IACdhC,EAAKoB,MAAMC,QAAQW,GAAG7B,KAAOA,IAAIsC,EAAQT,GAG7ChC,EAAKoB,MAAMC,QAAQoB,GAAOC,YAE1B1C,EAAK2C,UAAU3C,EAAKwB,OACpBxB,EAAK4C,cAgBL5C,EAAKoB,MAAMC,QAAQoB,GAAOC,YAAa,EAEvC1C,EAAKwC,SAAS,CAAElB,SAAUtB,EAAKoB,MAAME,SAAW,IAEhDtB,EAAKuB,UAAY,EAGK,KAAlBvB,EAAKuB,UAQLvB,EAAK2C,UAAU3C,EAAK0B,MACpB1B,EAAK4C,cAIL5C,EAAK2C,UAAU3C,EAAK2B,MACpB3B,EAAK4B,iBAKjBgB,UAAY,WAGR5C,EAAKwC,SAAS,CAAElB,SAAU,IAC1BtB,EAAK4B,YACL5B,EAAKuB,SAAW,EAIhB,IAFA,IAAMM,EAAO7B,EAAKoB,MAAMC,QAAQS,OAEvBE,EAAE,EAAGA,EAAEH,EAAMG,IAIlBhC,EAAKoB,MAAMC,QAAQW,GAAGU,YAAa,4EAhIhCG,GAGPA,EAAMC,OACND,EAAME,wCAiIV,IAAAC,EAAAvC,KAAI,OACIL,EAAAC,EAAAC,cAAC2C,EAAD,KACI7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAOlC,MAAUP,KAAKW,MAAME,WAC5BlB,EAAAC,EAAAC,cAAA,YACMG,KAAKW,MAAMC,QAAQ8B,IAAI,SAAAC,GAAM,OAC3BhD,EAAAC,EAAAC,cAAC+C,EAAD,CACIlD,GAAKiD,EAAOjD,GACZU,KAAOuC,EAAOvC,KACdF,MAAQyC,EAAOE,IACfZ,WAAaU,EAAOV,WACpBxC,eAAiB8C,EAAK9C,eACtB0C,UAAYI,EAAKJ,uBA3J3B9B,oBCFlByC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.cc4280a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends Component\r\n{   \r\n    handleClick = event =>\r\n    {   // The event handler for click events on the cards.  handleClick() checks to see if the card has\r\n        // been clicked previously and then either resets the game (if the card has already been selected)\r\n        // or increments the score (if it has not)\r\n\r\n        event.preventDefault();\r\n\r\n        // handleClick() originally did more than this, but when I realized that I couldn't use the\r\n        // state property to keep track of selected cards (the state property belongs to the component,\r\n        // which does not get shuffled when App.js shuffles animals[]).  But even though this function now\r\n        // does very little, it still appears to be necessary.  I don't seem to be able to pass a parameter\r\n        // to incrementScore() in JSX.\r\n\r\n        this.props.incrementScore(this.props.id)\r\n    }\r\n\r\n    render ()\r\n    {   return (\r\n            <div className=\"card\" onClick={ this.handleClick }>\r\n                <img src={ this.props.image} alt={ this.props.name}/>\r\n                <div className=\"name-div\">{ this.props.name }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = (props) =>\r\n{   return (\r\n        <header className=\"header-div\">\r\n            <div className=\"title-div\">Memory Game</div>\r\n            <div className=\"score-div\">\r\n                { props.score} correct in a row\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props =>\r\n    <div className=\"wrapper\">{props.children}</div>\r\n\r\n\r\nexport default Wrapper;","import React, {Component} from \"react\";\r\nimport Card from \"./components/Card\";\r\nimport Title from\"./components/Title\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport animals from \"./animals.json\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component\r\n{   state = \r\n    {   animals,\r\n        theScore: 0\r\n    };\r\n\r\n    theCount = 0;\r\n    loser = new Audio (\"./audio/loser.mp3\");\r\n    tada = new Audio (\"./audio/ta-da.mp3\");\r\n    ting = new Audio (\"./audio/ting.mp3\");\r\n\r\n    playAudio (audio)\r\n    {   // To be sure the audio is played each time, it must be loaded each time before it is played\r\n    \r\n        audio.load();\r\n        audio.play();\r\n    }\r\n\r\n    randomize = () =>\r\n    {   // Randomly arrange the animals to make the game a little more than trivial\r\n\r\n        // First I need a copy of animals[] because React won't let me directly mutate properties\r\n        // of state\r\n\r\n        const aLen = animals.length;\r\n        let newArray = [];\r\n        for (let i=0; i<aLen; i++)\r\n        {   newArray[i] = animals[i]\r\n        }\r\n\r\n        for (let i=aLen; i>=0; i--)\r\n        {   // randomly select some index from the first i elements in the array\r\n            //\r\n            // i is initialized to qLen and decrements with each iteration.  A random number from 0 to 11\r\n            // is chosen on the first iteration, 0 to 10 on the second, and so on.\r\n            //\r\n            // Remove the element from animals[] at the randomly selected index and .push() that value to the\r\n            // end of the array.  The loop iterates, the range of the random number is reduced by 1 so that\r\n            // the next randomly selected element is one that has not been selected previously.  The values\r\n            // pushed to the end of the array cannot be chosen again\r\n\r\n            var randomIndex = Math.floor(Math.random() * (i));\r\n\r\n            // save the value of the element at randomIndex\r\n            var saveIndex = newArray[randomIndex];\r\n\r\n            // remove the randomly selected index from animals[]\r\n            newArray.splice(randomIndex, 1);\r\n\r\n            // and push the saved value to the end of animals[]\r\n            newArray.push(saveIndex);\r\n        }\r\n\r\n        // Now I can mutate this.state.animals[]\r\n        this.setState ({ animals: newArray })\r\n    }\r\n\r\n    incrementScore = (id) =>\r\n    {\r\n        // This function is used by <Card> to increment the score when a tile card has been guessed\r\n        // correctly.  incrementScore() is passed to <Card> in props.\r\n\r\n        // But first things first...  Reshuffling animals[] does not shuffle the <Card> components, just\r\n        // the data rendered in the component.  So the state property of the <Card> component no longer\r\n        // references the animal, but the component.  That means I can't track whether an animal has\r\n        // been selected in the <Card> component.  I have to do it here.\r\n        //\r\n        // <Card> now gets the id of the animal object as well as the name and image url.  When the\r\n        // <card> calls this function it will pass the id as a parameter so this function knows which\r\n        // animal was selected.\r\n        //\r\n        // Keep in mind that the data has been shuffled, and the elements are no longer in numeric order\r\n        // of id.  I need to find that element first...\r\n\r\n        let index = 0;\r\n        const aLen = this.state.animals.length;\r\n\r\n        for (let i=0; i<aLen; i++)\r\n        {   if (this.state.animals[i].id === id) index = i;\r\n        }\r\n\r\n        if (this.state.animals[index].isSelected)\r\n        {   // This animal was selected previously...that's game over!\r\n            this.playAudio(this.loser)\r\n            this.resetGame()\r\n        }\r\n        else\r\n        {   // This animal has not been selected -- at least not during this round of play.  Set\r\n            // animal[].isSelected = true for the animal indicated by the variable index.  Increment\r\n            // theScore and use setState() to push theScore to <Title> and render the component.\r\n\r\n            // I don't seem to be able to reference the isSelected property of the element in\r\n            // animals[] in a call to setState().  Everything I tried is either a syntax error or\r\n            // else had no effect.  But I only need to use setState() to signal React to render\r\n            // components.  So, because animals[index].isSelected is not rendered on the page anywhere,\r\n            // I can get away with directly mutating it's value.\r\n            //\r\n            // May not be kosher -- but it works\r\n\r\n            // eslint-disable-next-line\r\n            this.state.animals[index].isSelected = true;\r\n\r\n            this.setState({ theScore: this.state.theScore + 1 });\r\n\r\n            this.theCount += 1;\r\n            \r\n            // if (this.state.theScore === 12)\r\n            if (this.theCount === 12)\r\n            {   // There are 12 cards.  The game is won if all the cards are selected.\r\n\r\n                // Although this.state.theScore increments correctly (the value rendered to the screen\r\n                // increments as cards are selected) I don't appear to be able to reference it in this\r\n                // if-block?  So I'm using an additional counter, theCount, to determine if the game\r\n                // has been won.\r\n\r\n                this.playAudio(this.tada);\r\n                this.resetGame();\r\n            }\r\n            else\r\n            {   // If the game isn't over, reanrrange the cards for the next guess\r\n                this.playAudio(this.ting);\r\n                this.randomize()\r\n            }\r\n        }\r\n    }\r\n\r\n    resetGame = () =>\r\n    {   // Reset game properties and reshuffle the cards for the next round...\r\n\r\n        this.setState({ theScore: 0 });\r\n        this.randomize();\r\n        this.theCount = 0;\r\n\r\n        const aLen = this.state.animals.length;\r\n\r\n        for (let i=0; i<aLen; i++)\r\n        {   // Don't forget to reset isSelected!\r\n\r\n            // eslint-disable-next-line\r\n            this.state.animals[i].isSelected = false;\r\n        }\r\n    }\r\n\r\n    render ()\r\n    {   return (\r\n            <Wrapper>\r\n                <Title score = { this.state.theScore } />\r\n                <main>\r\n                    { this.state.animals.map(animal =>\r\n                    (   <Card\r\n                            id={ animal.id }\r\n                            name={ animal.name }\r\n                            image={ animal.img }\r\n                            isSelected={ animal.isSelected }\r\n                            incrementScore={ this.incrementScore }\r\n                            resetGame={ this.resetGame }\r\n                        />\r\n                    ))}\r\n                </main>\r\n            </Wrapper>\r\n        )\r\n    }\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}